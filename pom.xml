<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- 1. Project Coordinates - Basic Identification -->
    <!-- Define your project's unique identifiers -->
    <groupId>org.example</groupId> <!-- Typically your reversed domain name -->
    <artifactId>E2EE-Disposable-Chat-App</artifactId> <!-- The specific name of this project/module -->
    <version>1.0-SNAPSHOT</version> <!-- SNAPSHOT indicates development version -->

    <!-- 2. Optional Project Metadata -->
    <name>E2EE Disposable Chat Client</name>
    <description>A simple command-line chat client with E2EE using Pusher.</description>

    <!-- 3. Properties -->
    <!-- Define central configuration values -->
    <properties>
        <!-- Specify Java version compatibility for compilation -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <!-- Specify the character encoding for source files -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Define versions for dependencies in one place (optional but good practice) -->
        <pusher.client.version>2.4.0</pusher.client.version>
        <pusher.http.version>1.3.0</pusher.http.version>
        <gson.version>2.10.1</gson.version>
        <slf4j.version>2.0.7</slf4j.version>
        <!-- Plugin Versions -->
        <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
        <maven.assembly.plugin.version>3.3.0</maven.assembly.plugin.version>
    </properties>

    <!-- 4. Dependencies -->
    <!-- List all the external libraries your project needs -->
    <dependencies>

        <!-- Pusher WebSocket Client (for listening/subscribing) -->
        <!-- Provides: com.pusher.client.* classes -->
        <dependency>
            <groupId>com.pusher</groupId>
            <artifactId>pusher-java-client</artifactId>
            <version>${pusher.client.version}</version> <!-- Using version property -->
        </dependency>

        <!-- Pusher HTTP REST Client (for triggering/sending messages) -->
        <!-- Provides: com.pusher.rest.* classes -->
        <!-- Used here client-side temporarily & insecurely with Secret Key -->
        <dependency>
            <groupId>com.pusher</groupId>
            <artifactId>pusher-http-java</artifactId>
            <version>${pusher.http.version}</version> <!-- Using version property -->
        </dependency>

        <!-- Google Gson (for JSON Serialization/Deserialization) -->
        <!-- Provides: com.google.gson.* classes -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${gson.version}</version> <!-- Using version property -->
        </dependency>

        <!-- SLF4J API (Logging Facade) -->
        <!-- Provides: org.slf4j.* interfaces (used by Pusher libraries) -->
        <!-- Often included transitively, but explicit declaration is fine -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version> <!-- Using version property -->
        </dependency>

        <!-- SLF4J Simple Implementation (Basic Console Logging) -->
        <!-- Provides an actual logging implementation for the SLF4J API -->
        <!-- Scope 'runtime': Only needed when running the application, not during compilation -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4j.version}</version> <!-- Using version property -->
            <scope>runtime</scope> <!-- Important: Use 'runtime' scope -->
        </dependency>

    </dependencies>

    <!-- 5. Build Configuration -->
    <!-- Define how the project is built and packaged -->
    <build>
        <plugins>
            <!-- Maven Compiler Plugin -->
            <!-- Ensures the code is compiled using the specified Java version -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <!-- Read Java version from properties -->
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>

            <!-- Maven Assembly Plugin -->
            <!-- Used to create the executable "fat JAR" (JAR with dependencies included) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>${maven.assembly.plugin.version}</version>
                <configuration>
                    <archive>
                        <!-- Define the Manifest file within the JAR -->
                        <manifest>
                            <!-- CRUCIAL: Specify the class containing the main method -->
                            <mainClass>com.application.Backend.ConsoleChatApp</mainClass>
                        </manifest>
                    </archive>
                    <descriptorRefs>
                        <!-- Use the predefined "recipe" for creating a JAR with dependencies -->
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
                <!-- Bind the plugin goal to the package phase -->
                <executions>
                    <execution>
                        <id>make-assembly</id> <!-- Unique ID for this execution -->
                        <phase>package</phase> <!-- Run when 'mvn package' is executed -->
                        <goals>
                            <goal>single</goal> <!-- Execute the 'single' goal to create the assembly -->
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>